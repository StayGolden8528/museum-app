{"version":3,"sources":["components/Header.js","components/Footer.js","components/SearchForm.js","components/DisplayArea.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Footer","APIKEY","process","SearchForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","event","preventDefault","getSearchResults","state","searchInput","handleChange","console","log","target","value","setState","query","axios","get","params","ps","q","key","imgonly","results","art","data","artObjects","props","updateArt","updateCurrentSearch","_context","t0","message","_this2","onSubmit","htmlFor","id","name","type","placeholder","onChange","Component","DisplayArea","className","length","currentSearch","map","item","title","webImage","artist","principalOrFirstMaker","src","url","alt","App","components_Header","components_SearchForm","components_DisplayArea","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25b783d1.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n\treturn (\n\t\t<header>\n\t\t\t<h1>Rijks Museum Database</h1>\n\t\t</header>\n\t);\n}\n\nexport default Header;","import React from 'react';\n\nfunction Footer() {\n\treturn (\n\t\t<footer><p>&copy;2019 HackerYou</p></footer>\n\t);\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst APIKEY = process.env.REACT_APP_API; // Your API Key goes here, we should put this in .env\n\n// Searchform is in charge of the actual call to the API, \n// It should have a controlled input for searching (what are the 3 things we need to make a controlled input?)\n// It will recieve 2 function props, one to pass the current search term to App\n// And one to pass the current search results to the App\n\n// This component should have the structure:\n// <form>\n// \t<label></label>\n//\t<input type=\"search\"/>\n// </form>\n\nclass SearchForm extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tsearchInput: \"\"\n\t\t};\n\t\tconsole.log(APIKEY);\n\t}\n\n\tasync getSearchResults(query) {\n\n\t\ttry {\n\t\t\tconst results = await axios.get('https://www.rijksmuseum.nl/api/en/collection/',{\n\t\t\t\tparams: {\n\t\t\t\t\tps: 20,\n\t\t\t\t\tq: query,\n\t\t\t\t\tkey: APIKEY,\n\t\t\t\t\timgonly: true\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst art = results.data.artObjects;\t\n\n\t\t\tconsole.log(results);\n\t\t\tthis.props.updateArt(art);\n\t\t\tthis.props.updateCurrentSearch(this.state.searchInput);\n\n\t\t\tthis.setState({\n\t\t\t\tsearchInput: ''\n\t\t\t});\n\t\t\t// Make an Ajax call with Axios here\n\t\t\t// Reset our search form\n\t\t} catch (error) {\n\t\t\tconsole.log(error.message);\n\t\t}\n\t}\n\n\thandleSubmit = (event) => {  //use ES6 function to avoid binding issues\n\t\tevent.preventDefault();\n\t\t// console.log('working');\n\t\tthis.getSearchResults(this.state.searchInput);\n\t}\n\n\thandleChange = (event) => {\n\t\tconsole.log(event.target.value);\n\t\tthis.setState({\n\t\t\tsearchInput: event.target.value\n\t\t\t\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<form onSubmit={ (event) => this.handleSubmit(event) }>\n\t\t\t\t<label htmlFor=\"What would you like to see?\"></label>\n\t\t\t\t<input \n\t\t\t\tid=\"search\" \n\t\t\t\tname=\"search\" \n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"Search\"\n\t\t\t\tvalue={ this.state.searchInput }\n\t\t\t\tonChange={ (event) => this.handleChange(event) }\t\t\n\t\t\t\t/>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default SearchForm;\n\n//step 1 - adding the label and inputs for the form\n//step 2 - create an es6 handleSubmit function to prevent default refresh\n//step 3 - create a \"value\" property on the form which is the state of the searchInput\n//step 4- add this.state below the constructor/super and set searchInput to an empty string\n//step 5 - add an onChange es6 function to watch for the event and set it to the state of the handleChange function(event)\n//step 6 - update the handleChange to setState equal to the searchInput: event.target.value","import React from 'react';\n\n\n\n\nfunction DisplayArea (props) {\n\n\t\treturn (\n\t\t\t<div className=\"displayArea\">\n\t\t\t\t{ \n\t\t\t\t\tprops.art.length > 0 ? (\n\t\t\t\t\t\t<div className = \"showResults\" >\n\t\t\t\t\t\t\t<p> Showing results for: { props.currentSearch }</p> \n\t\t\t\t\t\t\t<div className = \"artworks\" >\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprops.art.map(item => {\n\t\t\t\t\t\t\t\t\t\tconst { id, title, webImage,\n\t\t\t\t\t\t\t\t\t\tprincipalOrFirstMaker: artist } = item;\n\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<div key= { id } className = \"art\">\n\t\t\t\t\t\t\t\t\t\t\t\t<img src={webImage.url } alt = \"\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t<h2 > { title} </h2> \n\t\t\t\t\t\t\t\t\t\t\t\t<h3> { artist } </h3> \n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t\t<div className = \"noResults\" >\n\t\t\t\t\t\t\t<p> Please enter a search term. </p> \n\t\t\t\t\t\t</div>\n\t\t\t\t)\n\n\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n\n\nexport default DisplayArea;","import React, { Component } from 'react';\nimport './App.scss';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport SearchForm from './components/SearchForm';\nimport DisplayArea from './components/DisplayArea';\n\n// Our app should have state for the current search term and results, so it can pass these things to the display area\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state= {\n      currentSearch: '',\n      art: []\n    };\n  }\n\n  updateCurrentSearch = (currentSearch) => {\n    this.setState({\n      currentSearch\n    });\n  }\n\n  updateArt = (art) => {\n    this.setState({\n      art\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <main>\n          <SearchForm\n            updateCurrentSearch={ this.updateCurrentSearch }\n            updateArt= {this.updateArt }\n          />\n          <DisplayArea\n          art= { this.state.art }\n          currentSearch={ this.state.currentSearch }\n          />\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}